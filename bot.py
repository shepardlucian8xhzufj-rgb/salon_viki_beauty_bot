# -*- coding: utf-8 -*-
"""
TELEGRAM-–ë–û–¢ –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–î–ú–ò–ù-–£–ü–†–ê–í–õ–ï–ù–ò–ï–ú
–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç
"""

import asyncio
import logging
import sys
import signal
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    from telegram.error import NetworkError, TimedOut, TelegramError
    print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ telegram –Ω–∞–π–¥–µ–Ω–∞")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot==20.3")
    sys.exit(1)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('salon_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‚úÖ –í–ê–® –¢–û–ö–ï–ù
BOT_TOKEN = "8483702267:AAFgPjNjcx07qlDM47t43Ykt_2c7yIYdCMY"

print("ü§ñ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ô –í–ï–†–°–ò–ò –ë–û–¢–ê –° –ê–î–ú–ò–ù-–£–ü–†–ê–í–õ–ï–ù–ò–ï–ú")
print("üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    ADDING_MASTER = "adding_master"
    ADDING_MASTER_SERVICE = "adding_master_service"
    ADDING_SERVICE = "adding_service"
    ADDING_SERVICE_ITEMS = "adding_service_items"
    ADDING_SERVICE_DURATION = "adding_service_duration"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
SERVICES = {
    "nails": {
        "name": "üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å",
        "services": ["–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ", "–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ", "–ì–µ–ª—å-–ª–∞–∫ - 1200‚ÇΩ"],
        "duration": 90
    },
    "hair": {
        "name": "üíá‚Äç‚ôÄÔ∏è –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", 
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è - 2500‚ÇΩ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 4500‚ÇΩ", "–£–∫–ª–∞–¥–∫–∞ - 1500‚ÇΩ"],
        "duration": 120
    },
    "makeup": {
        "name": "üíÑ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂",
        "services": ["–ë—Ä–æ–≤–∏ - 8000‚ÇΩ", "–ì—É–±—ã - 12000‚ÇΩ", "–í–µ–∫–∏ - 10000‚ÇΩ"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞"],
    "hair": ["–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞"],
    "makeup": ["–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–∞"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Å'",
    "phone": "+7 (999) 123-45-67", 
    "address": "—É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥–æ–º 10"
}

# ============ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ ============
ADMIN_IDS = [
    412594355, 1360974844, 930316589
]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS

print(f"üëë –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}")

class Database:
    def __init__(self):
        self.init_db()
        logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def init_db(self):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    phone TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS appointments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_type TEXT,
                    master TEXT,
                    appointment_date TEXT,
                    appointment_time TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É—Å–ª—É–≥
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS services (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    service_key TEXT UNIQUE NOT NULL,
                    service_name TEXT NOT NULL,
                    service_items TEXT NOT NULL,
                    duration INTEGER DEFAULT 90,
                    is_active INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS masters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    master_name TEXT NOT NULL,
                    service_key TEXT NOT NULL,
                    is_active INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(master_name, service_key)
                )
            ''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ)
            cursor.execute('SELECT COUNT(*) FROM services')
            if cursor.fetchone()[0] == 0:
                self._init_default_services(cursor)
            
            cursor.execute('SELECT COUNT(*) FROM masters')
            if cursor.fetchone()[0] == 0:
                self._init_default_masters(cursor)
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def _init_default_services(self, cursor):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥ –∏–∑ SERVICES"""
        for key, service_data in SERVICES.items():
            service_items = '\n'.join(service_data['services'])
            cursor.execute('''
                INSERT INTO services (service_key, service_name, service_items, duration)
                VALUES (?, ?, ?, ?)
            ''', (key, service_data['name'], service_items, service_data['duration']))
        logger.info("‚úÖ –£—Å–ª—É–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def _init_default_masters(self, cursor):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ MASTERS"""
        for service_key, masters_list in MASTERS.items():
            for master_name in masters_list:
                cursor.execute('''
                    INSERT INTO masters (master_name, service_key)
                    VALUES (?, ?)
                ''', (master_name, service_key))
        logger.info("‚úÖ –ú–∞—Å—Ç–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # ============ –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–õ–£–ì–ê–ú–ò ============
    
    def get_all_services(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM services WHERE is_active = 1')
            services = cursor.fetchall()
            conn.close()
            
            result = []
            for service in services:
                result.append({
                    'id': service[0],
                    'key': service[1],
                    'name': service[2],
                    'items': service[3],
                    'duration': service[4]
                })
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
            return []
    
    def add_service(self, service_key: str, service_name: str, service_items: str, duration: int):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO services (service_key, service_name, service_items, duration)
                VALUES (?, ?, ?, ?)
            ''', (service_key, service_name, service_items, duration))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {service_name}")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ —Å –∫–ª—é—á–æ–º {service_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
            return False
    
    def delete_service(self, service_key: str):
        """–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE services SET is_active = 0 WHERE service_key = ?', (service_key,))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –£—Å–ª—É–≥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {service_key}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
            return False
    
    # ============ –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–°–¢–ï–†–ê–ú–ò ============
    
    def get_all_masters(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT m.id, m.master_name, m.service_key, s.service_name
                FROM masters m
                LEFT JOIN services s ON m.service_key = s.service_key
                WHERE m.is_active = 1
                ORDER BY m.service_key, m.master_name
            ''')
            masters = cursor.fetchall()
            conn.close()
            
            result = []
            for master in masters:
                result.append({
                    'id': master[0],
                    'name': master[1],
                    'service_key': master[2],
                    'service_name': master[3] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'
                })
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
            return []
    
    def get_masters_by_service(self, service_key: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É —É—Å–ª—É–≥–∏"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT master_name FROM masters 
                WHERE service_key = ? AND is_active = 1
            ''', (service_key,))
            masters = cursor.fetchall()
            conn.close()
            return [m[0] for m in masters]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ —É—Å–ª—É–≥–∏: {e}")
            return []
    
    def add_master(self, master_name: str, service_key: str):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO masters (master_name, service_key)
                VALUES (?, ?)
            ''', (master_name, service_key))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {master_name} ({service_key})")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä {master_name} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É—Å–ª—É–≥–æ–π {service_key}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return False
    
    def delete_master(self, master_id: int):
        """–£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE masters SET is_active = 0 WHERE id = ?', (master_id,))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ú–∞—Å—Ç–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ID {master_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return False
    
    # ============ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ ============
    
    def is_user_registered(self, user_id: int) -> bool:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def register_user(self, user_id: int, name: str, phone: str):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
                (user_id, name, phone)
            )
            conn.commit()
            conn.close()
            logger.info(f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {name} (ID: {user_id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
                (user_id, service_type, master, date, time)
            )
            conn.commit()
            conn.close()
            logger.info(f"üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {date} {time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT service_type, master, appointment_date, appointment_time FROM appointments WHERE user_id = ? AND status = "active"',
                (user_id,)
            )
            appointments = cursor.fetchall()
            conn.close()
            
            result = []
            for apt in appointments:
                result.append({
                    'service_type': apt[0],
                    'master': apt[1],
                    'date': apt[2],
                    'time': apt[3]
                })
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id FROM appointments WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"',
                (master, date, time)
            )
            result = cursor.fetchone()
            conn.close()
            return result is None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–ª–æ–Ω–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
            active_appointments = cursor.fetchone()[0]
            
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE appointment_date = ? AND status = "active"', (today,))
            today_appointments = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments')
            total_appointments = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_users': total_users,
                'active_appointments': active_appointments,
                'today_appointments': today_appointments,
                'total_appointments': total_appointments
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_users': 0,
                'active_appointments': 0,
                'today_appointments': 0,
                'total_appointments': 0
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = (
            Application.builder()
            .token(BOT_TOKEN)
            .connect_timeout(30.0)
            .read_timeout(30.0)
            .write_timeout(30.0)
            .pool_timeout(30.0)
            .get_updates_read_timeout(42.0)
            .build()
        )
        self.setup_handlers()
        self.running = False
        logger.info("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.first_name or "–ì–æ—Å—Ç—å"
            user_states[user_id] = UserState.MAIN_MENU
            
            admin_badge = " üëë" if is_admin(user_id) else ""
            
            logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id}){admin_badge}")
            
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SALON_INFO['name']}, {username}!{admin_badge}\n\n"
                f"üåü –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                f"üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É\n"
                f"üìã –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n"
                f"üë©‚Äçüíª –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n\n"
                f"üìç {SALON_INFO['address']}\n"
                f"üìû {SALON_INFO['phone']}\n\n"
                f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            )
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
                [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
                [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
                [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
                [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
            ]
            
            if is_admin(user_id):
                keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"üìò –ö–Ω–æ–ø–∫–∞: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            if data == "services":
                await self.show_services(query)
            elif data == "book":
                await self.start_booking(query)
            elif data == "masters":
                await self.show_masters(query)
            elif data == "promotions":
                await self.show_promotions(query)
            elif data == "my_bookings":
                await self.show_user_bookings(query)
            elif data == "admin_panel":
                if is_admin(user_id):
                    await self.show_admin_panel(query)
                else:
                    await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
            # –ù–æ–≤—ã–µ –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            elif data == "admin_manage_services":
                if is_admin(user_id):
                    await self.show_services_management(query)
            elif data == "admin_manage_masters":
                if is_admin(user_id):
                    await self.show_masters_management(query)
            elif data == "admin_add_service":
                if is_admin(user_id):
                    await self.start_add_service(query)
            elif data == "admin_add_master":
                if is_admin(user_id):
                    await self.start_add_master(query)
            elif data.startswith("admin_delete_service_"):
                if is_admin(user_id):
                    service_key = data.replace("admin_delete_service_", "")
                    await self.delete_service(query, service_key)
            elif data.startswith("admin_delete_master_"):
                if is_admin(user_id):
                    master_id = int(data.replace("admin_delete_master_", ""))
                    await self.delete_master(query, master_id)
            elif data.startswith("admin_add_master_service_"):
                if is_admin(user_id):
                    service_key = data.replace("admin_add_master_service_", "")
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data –µ—Å–ª–∏ –Ω–µ—Ç
                    if user_id not in user_data:
                        user_data[user_id] = {}
                    user_data[user_id]['new_master_service'] = service_key
                    user_states[user_id] = UserState.ADDING_MASTER
                    text = f"üë§ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞**\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞:"
                    await query.edit_message_text(text, parse_mode='Markdown')
            elif data.startswith("service_"):
                await self.select_service(query, data)
            elif data.startswith("date_"):
                await self.select_date(query, data)
            elif data.startswith("time_"):
                await self.select_time(query, data)
            elif data == "back_to_menu":
                await self.back_to_main_menu(query)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
            await query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start")
    
    # ============ –ù–û–í–´–ï –ê–î–ú–ò–ù-–ú–ï–¢–û–î–´ ============
    
    async def show_admin_panel(self, query):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            text = (
                f"üëë **–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨**\n"
                f"{SALON_INFO['name']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="admin_manage_masters")],
                [InlineKeyboardButton("üíÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_manage_services")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_admin_panel: {e}")
    
    async def show_services_management(self, query):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""
        try:
            services = db.get_all_services()
            
            text = f"üíÖ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–õ–£–ì–ê–ú–ò**\n\n–í—Å–µ–≥–æ —É—Å–ª—É–≥: {len(services)}\n\n"
            
            if services:
                for service in services:
                    text += f"‚ñ™Ô∏è **{service['name']}**\n"
                    text += f"   –ö–ª—é—á: `{service['key']}`\n"
                    text += f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['duration']} –º–∏–Ω\n\n"
            else:
                text += "‚ùå –£—Å–ª—É–≥ –ø–æ–∫–∞ –Ω–µ—Ç"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="admin_add_service")]
            ]
            
            # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å: {service['name']}", 
                        callback_data=f"admin_delete_service_{service['key']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_services_management: {e}")
    
    async def show_masters_management(self, query):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏"""
        try:
            masters = db.get_all_masters()
            
            text = f"üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê–ú–ò**\n\n–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}\n\n"
            
            if masters:
                current_service = None
                for master in masters:
                    if current_service != master['service_name']:
                        current_service = master['service_name']
                        text += f"\n**{current_service}:**\n"
                    text += f"‚ñ™Ô∏è {master['name']}\n"
            else:
                text += "‚ùå –ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ —É—Å–ª—É–≥–∞–º
            services = db.get_all_services()
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤: {service['name']}", 
                        callback_data=f"admin_add_master_service_{service['key']}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            for master in masters:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å: {master['name']}", 
                        callback_data=f"admin_delete_master_{master['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_masters_management: {e}")
    
    async def start_add_service(self, query):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
        user_id = query.from_user.id
        user_states[user_id] = UserState.ADDING_SERVICE
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data –µ—Å–ª–∏ –Ω–µ—Ç
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['adding_service'] = {}
        
        text = (
            f"üíÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏**\n\n"
            f"–®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —É—Å–ª—É–≥–∏\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: `nails`, `hair`, `massage`)\n\n"
            f"–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
    
    async def start_add_master(self, query):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª)"""
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback admin_add_master_service_
        pass
    
    async def delete_service(self, query, service_key):
        """–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É"""
        try:
            success = db.delete_service(service_key)
            
            if success:
                text = f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞: {service_key}"
            else:
                text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"
            
            keyboard = [[InlineKeyboardButton("üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="admin_manage_services")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_service: {e}")
    
    async def delete_master(self, query, master_id):
        """–£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"""
        try:
            success = db.delete_master(master_id)
            
            if success:
                text = f"‚úÖ –ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            else:
                text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"
            
            keyboard = [[InlineKeyboardButton("üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏", callback_data="admin_manage_masters")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ delete_master: {e}")
    
    # ============ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞) ============
    
    async def show_services(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏"""
        try:
            services = db.get_all_services()
            text = f"üìã **–£—Å–ª—É–≥–∏ {SALON_INFO['name']}**\n\n"
            
            for service in services:
                text += f"**{service['name']}**\n"
                for item in service['items'].split('\n'):
                    text += f"‚Ä¢ {item}\n"
                text += f"‚è± {service['duration']} –º–∏–Ω\n\n"
            
            text += f"üìû {SALON_INFO['phone']}\n"
            text += f"üìç {SALON_INFO['address']}"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_services: {e}")
    
    async def start_booking(self, query):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏"""
        try:
            user_id = query.from_user.id
            user_states[user_id] = UserState.SELECTING_SERVICE
            
            services = db.get_all_services()
            text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:**"
            
            keyboard = []
            for service in services:
                keyboard.append([InlineKeyboardButton(
                    service['name'], 
                    callback_data=f"service_{service['key']}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_booking: {e}")
    
    async def select_service(self, query, callback_data):
        """–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç"""
        try:
            user_id = query.from_user.id
            service_key = callback_data.replace("service_", "")
            
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]['service_type'] = service_key
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É –∏–∑ –ë–î
            services = db.get_all_services()
            service_info = next((s for s in services if s['key'] == service_key), None)
            
            if not service_info:
                await query.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            text = f"**{service_info['name']}**\n\n"
            for item in service_info['items'].split('\n'):
                text += f"‚Ä¢ {item}\n"
            text += f"\n‚è± {service_info['duration']} –º–∏–Ω\n\n"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
            available_dates = []
            for i in range(1, 8):
                date = datetime.now() + timedelta(days=i)
                if date.weekday() < 6:
                    available_dates.append(date)
            
            if available_dates:
                text += "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:**"
                keyboard = []
                for date in available_dates:
                    date_str = date.strftime("%Y-%m-%d")
                    date_display = date.strftime("%d.%m (%a)")
                    days = {'Mon': '–ü–Ω', 'Tue': '–í—Ç', 'Wed': '–°—Ä', 'Thu': '–ß—Ç', 'Fri': '–ü—Ç', 'Sat': '–°–±'}
                    for eng, rus in days.items():
                        date_display = date_display.replace(eng, rus)
                    keyboard.append([InlineKeyboardButton(date_display, callback_data=f"date_{date_str}")])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="book")])
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                text += "‚ùå **–ù–µ—Ç –¥–∞—Ç**"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ select_service: {e}")
    
    async def select_date(self, query, callback_data):
        """–í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            user_id = query.from_user.id
            selected_date = callback_data.replace("date_", "")
            user_data[user_id]['date'] = selected_date
            
            service_type = user_data[user_id]['service_type']
            masters = db.get_masters_by_service(service_type)
            
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            text = f"üìÖ **{formatted_date}**\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:**"
            
            keyboard = []
            for hour in WORK_HOURS:
                time_str = f"{hour:02d}:00"
                available = any(db.is_time_available(master, selected_date, time_str) for master in masters)
                if available:
                    keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
            
            if keyboard:
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")])
            else:
                text += "\n‚ùå **–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏**"
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"service_{service_type}")]]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ select_date: {e}")
    
    async def select_time(self, query, callback_data):
        """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            user_id = query.from_user.id
            selected_time = callback_data.replace("time_", "")
            user_data[user_id]['time'] = selected_time
            
            if not db.is_user_registered(user_id):
                user_states[user_id] = UserState.AWAITING_NAME
                
                text = (
                    f"üìù **–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                    f"üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                await query.edit_message_text(text, parse_mode='Markdown')
            else:
                await self.confirm_booking(query)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ select_time: {e}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            if user_id not in user_states:
                await self.start_command(update, context)
                return
            
            state = user_states[user_id]
            
            if state == UserState.AWAITING_NAME:
                user_data[user_id]['name'] = text.strip()
                user_states[user_id] = UserState.AWAITING_PHONE
                
                await update.message.reply_text(f"üëç –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            
            elif state == UserState.AWAITING_PHONE:
                user_data[user_id]['phone'] = text.strip()
                
                db.register_user(user_id, user_data[user_id]['name'], user_data[user_id]['phone'])
                await self.complete_booking(update)
            
            # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            elif state == UserState.ADDING_SERVICE:
                await self.process_add_service(update, text)
            
            elif state == UserState.ADDING_SERVICE_ITEMS:
                await self.process_add_service_items(update, text)
            
            elif state == UserState.ADDING_SERVICE_DURATION:
                await self.process_add_service_duration(update, text)
            
            elif state == UserState.ADDING_MASTER:
                await self.process_add_master(update, text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text: {e}")
    
    async def process_add_service(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ - —à–∞–≥ 1 (–∫–ª—é—á)"""
        user_id = update.effective_user.id
        service_key = text.strip().lower().replace(' ', '_')
        
        user_data[user_id]['adding_service']['key'] = service_key
        
        reply_text = (
            f"üíÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏**\n\n"
            f"–ö–ª—é—á: `{service_key}`\n\n"
            f"–®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: üíÖ –ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å)"
        )
        
        await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–Ω–∞–∑–≤–∞–Ω–∏–µ)
        user_data[user_id]['adding_service_step'] = 'name'
    
    async def process_add_service_items(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ - —à–∞–≥ 2 (–Ω–∞–∑–≤–∞–Ω–∏–µ)"""
        user_id = update.effective_user.id
        
        if 'adding_service_step' in user_data[user_id] and user_data[user_id]['adding_service_step'] == 'name':
            service_name = text.strip()
            user_data[user_id]['adding_service']['name'] = service_name
            user_data[user_id]['adding_service_step'] = 'items'
            user_states[user_id] = UserState.ADDING_SERVICE_ITEMS
            
            reply_text = (
                f"üíÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏**\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service_name}\n\n"
                f"–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ —Ü–µ–Ω—ã\n"
                f"(–∫–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"–ú–∞–Ω–∏–∫—é—Ä - 1500‚ÇΩ\n"
                f"–ü–µ–¥–∏–∫—é—Ä - 2000‚ÇΩ)"
            )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        elif user_states[user_id] == UserState.ADDING_SERVICE_ITEMS:
            service_items = text.strip()
            user_data[user_id]['adding_service']['items'] = service_items
            user_states[user_id] = UserState.ADDING_SERVICE_DURATION
            
            reply_text = (
                f"üíÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏**\n\n"
                f"–£—Å–ª—É–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
                f"–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n"
                f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 90)"
            )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
    
    async def process_add_service_duration(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ - —à–∞–≥ 3 (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)"""
        user_id = update.effective_user.id
        
        try:
            duration = int(text.strip())
            
            service_data = user_data[user_id]['adding_service']
            success = db.add_service(
                service_data['key'],
                service_data['name'],
                service_data['items'],
                duration
            )
            
            if success:
                reply_text = (
                    f"‚úÖ **–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                    f"**{service_data['name']}**\n"
                    f"–ö–ª—é—á: `{service_data['key']}`\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
            else:
                reply_text = (
                    f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏**\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, —É—Å–ª—É–≥–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
                )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states[user_id] = UserState.MAIN_MENU
            if 'adding_service' in user_data[user_id]:
                del user_data[user_id]['adding_service']
            if 'adding_service_step' in user_data[user_id]:
                del user_data[user_id]['adding_service_step']
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç)"
            )
    
    async def process_add_master(self, update, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = update.effective_user.id
        master_name = text.strip()
        service_key = user_data[user_id].get('new_master_service')
        
        if not service_key:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return
        
        success = db.add_master(master_name, service_key)
        
        if success:
            reply_text = (
                f"‚úÖ **–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë§ {master_name}\n"
                f"–£—Å–ª—É–≥–∞: {service_key}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            )
        else:
            reply_text = (
                f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞**\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –º–∞—Å—Ç–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
            )
        
        await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[user_id] = UserState.MAIN_MENU
        if 'new_master_service' in user_data[user_id]:
            del user_data[user_id]['new_master_service']
    
    async def confirm_booking(self, query):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = query.from_user.id
            await self._finalize_booking(user_id, query)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ confirm_booking: {e}")
    
    async def complete_booking(self, update):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            await self._finalize_booking(user_id, update)
            user_states[user_id] = UserState.MAIN_MENU
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ complete_booking: {e}")
    
    async def _finalize_booking(self, user_id, update_or_query):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            service_type = user_data[user_id]['service_type']
            date = user_data[user_id]['date']
            time = user_data[user_id]['time']
            
            masters = db.get_masters_by_service(service_type)
            available_master = None
            for master in masters:
                if db.is_time_available(master, date, time):
                    available_master = master
                    break
            
            if available_master:
                db.create_appointment(user_id, service_type, available_master, date, time)
                
                date_obj = datetime.strptime(date, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
                services = db.get_all_services()
                service_info = next((s for s in services if s['key'] == service_type), None)
                service_name = service_info['name'] if service_info else service_type
                
                text = (
                    f"üéâ **–ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time}\n"
                    f"üë©‚Äçüíª –ú–∞—Å—Ç–µ—Ä: {available_master}\n"
                    f"üíÖ –£—Å–ª—É–≥–∞: {service_name}\n\n"
                    f"üìç {SALON_INFO['address']}\n"
                    f"üìû {SALON_INFO['phone']}\n\n"
                    f"‚ú® –ñ–¥–µ–º –≤–∞—Å!"
                )
            else:
                text = "üòî –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _finalize_booking: {e}")
    
    async def show_masters(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–∞—Ö"""
        try:
            masters = db.get_all_masters()
            text = f"üë©‚Äçüíª **–ú–∞—Å—Ç–µ—Ä–∞ {SALON_INFO['name']}:**\n\n"
            
            if masters:
                current_service = None
                for master in masters:
                    if current_service != master['service_name']:
                        current_service = master['service_name']
                        text += f"\n**{current_service}:**\n"
                    text += f"‚Ä¢ {master['name']}\n"
            else:
                text += "‚ùå –ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_masters: {e}")
    
    async def show_promotions(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏"""
        try:
            text = (
                f"üéØ **–ê–∫—Ü–∏–∏ {SALON_INFO['name']}:**\n\n"
                f"üåü –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ\n"
                f"üíÖ –ú–∞–Ω–∏–∫—é—Ä + –ø–µ–¥–∏–∫—é—Ä = —Å–∫–∏–¥–∫–∞ 15%\n"
                f"üëØ‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ–¥–∏ –ø–æ–¥—Ä—É–≥—É - —Å–∫–∏–¥–∫–∞ 10%\n"
                f"üéÇ –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è - —Å–∫–∏–¥–∫–∞ 25%\n\n"
                f"üìû –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {SALON_INFO['phone']}"
            )
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_promotions: {e}")
    
    async def show_user_bookings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = query.from_user.id
            appointments = db.get_user_appointments(user_id)
            
            if appointments:
                text = "üì± **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                services = db.get_all_services()
                services_dict = {s['key']: s['name'] for s in services}
                
                for apt in appointments:
                    service_name = services_dict.get(apt['service_type'], apt['service_type'])
                    date_obj = datetime.strptime(apt['date'], "%Y-%m-%d")
                    formatted_date = date_obj.strftime("%d.%m.%Y")
                    
                    text += f"‚Ä¢ {service_name}\n"
                    text += f"üìÖ {formatted_date} –≤ {apt['time']}\n"
                    text += f"üë©‚Äçüíª {apt['master']}\n\n"
                
                text += f"üìû –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {SALON_INFO['phone']}"
            else:
                text = "üì± –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\nüìÖ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_user_bookings: {e}")
    
    async def back_to_main_menu(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            user_id = query.from_user.id
            user_states[user_id] = UserState.MAIN_MENU
            
            admin_badge = " üëë" if is_admin(user_id) else ""
            
            text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SALON_INFO['name']}**{admin_badge}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
                [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="services")],
                [InlineKeyboardButton("üë©‚Äçüíª –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
                [InlineKeyboardButton("üéØ –ê–∫—Ü–∏–∏", callback_data="promotions")],
                [InlineKeyboardButton("üì± –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
            ]
            
            if is_admin(user_id):
                keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_main_menu: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("‚ÑπÔ∏è –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        self.running = False
        
        try:
            await self.application.stop()
            await self.application.shutdown()
            logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        self.running = True
        
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –° –ê–î–ú–ò–ù-–£–ü–†–ê–í–õ–ï–ù–ò–ï–ú!")
        logger.info("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
        logger.info("üìä –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ salon_bot.log")
        logger.info("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: " + str(len(ADMIN_IDS)))
        logger.info("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        retry_count = 0
        max_retries = 5
        
        while self.running and retry_count < max_retries:
            try:
                self.application.run_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True,
                    stop_signals=None
                )
                break
                
            except (NetworkError, TimedOut) as e:
                retry_count += 1
                logger.warning(f"üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                
                if retry_count < max_retries:
                    wait_time = min(30 * retry_count, 300)
                    logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    asyncio.run(asyncio.sleep(wait_time))
                else:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
                    
            except KeyboardInterrupt:
                logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
                
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                retry_count += 1
                
                if retry_count < max_retries:
                    wait_time = 30
                    logger.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    asyncio.run(asyncio.sleep(wait_time))
                else:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º...")
        bot = SalonBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("\n‚ÑπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")

if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –° –ê–î–ú–ò–ù-–£–ü–†–ê–í–õ–ï–ù–ò–ï–ú...")
    print("=" * 50)
    main()
