# -*- coding: utf-8 -*-
"""
TELEGRAM-Ð‘ÐžÐ¢ Ð¡ÐÐ›ÐžÐÐ ÐšÐ ÐÐ¡ÐžÐ¢Ð« - Ð ÐÐ¡Ð¨Ð˜Ð Ð•ÐÐÐÐ¯ Ð’Ð•Ð Ð¡Ð˜Ð¯ Ð¡ ÐÐ”ÐœÐ˜Ð-Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð•Ðœ
Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð° Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑ‚ÑŒ ÑƒÐ¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ð¼Ð¸ Ð¸ ÑƒÑÐ»ÑƒÐ³Ð°Ð¼Ð¸ Ñ‡ÐµÑ€ÐµÐ· Ð±Ð¾Ñ‚
"""

import asyncio
import logging
import sys
import signal
from datetime import datetime, timedelta
from typing import Dict, List
import sqlite3

# ÐŸÑ€Ð¾Ð²ÐµÑ€ÐºÐ° Ð±Ð¸Ð±Ð»Ð¸Ð¾Ñ‚ÐµÐºÐ¸
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    from telegram.error import NetworkError, TimedOut, TelegramError
    print("âœ… Ð‘Ð¸Ð±Ð»Ð¸Ð¾Ñ‚ÐµÐºÐ° telegram Ð½Ð°Ð¹Ð´ÐµÐ½Ð°")
except ImportError:
    print("âŒ Ð£ÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚Ðµ: pip install python-telegram-bot==20.3")
    sys.exit(1)

# Ð Ð°ÑÑˆÐ¸Ñ€ÐµÐ½Ð½Ð°Ñ Ð½Ð°ÑÑ‚Ñ€Ð¾Ð¹ÐºÐ° Ð»Ð¾Ð³Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð¸Ñ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('salon_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# âœ… Ð’ÐÐ¨ Ð¢ÐžÐšÐ•Ð
BOT_TOKEN = "8483702267:AAFgPjNjcx07qlDM47t43Ykt_2c7yIYdCMY"

print("ðŸ¤– Ð—ÐÐŸÐ£Ð¡Ðš Ð ÐÐ¡Ð¨Ð˜Ð Ð•ÐÐÐžÐ™ Ð’Ð•Ð Ð¡Ð˜Ð˜ Ð‘ÐžÐ¢Ð Ð¡ ÐÐ”ÐœÐ˜Ð-Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð•Ðœ")
print("ðŸ”‘ Ð¢Ð¾ÐºÐµÐ½ ÑƒÑÑ‚Ð°Ð½Ð¾Ð²Ð»ÐµÐ½")

# Ð¡Ð¾ÑÑ‚Ð¾ÑÐ½Ð¸Ñ
class UserState:
    MAIN_MENU = "main_menu"
    SELECTING_SERVICE = "selecting_service"
    AWAITING_NAME = "awaiting_name"
    AWAITING_PHONE = "awaiting_phone"
    # ÐÐ¾Ð²Ñ‹Ðµ ÑÐ¾ÑÑ‚Ð¾ÑÐ½Ð¸Ñ Ð´Ð»Ñ ÑƒÐ¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ñ
    ADDING_MASTER = "adding_master"
    ADDING_MASTER_SERVICE = "adding_master_service"
    ADDING_SERVICE = "adding_service"
    ADDING_SERVICE_ITEMS = "adding_service_items"
    ADDING_SERVICE_DURATION = "adding_service_duration"

# ÐÐ°ÑÑ‚Ñ€Ð¾Ð¹ÐºÐ¸ ÑÐ°Ð»Ð¾Ð½Ð° (Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÑŽÑ‚ÑÑ Ð´Ð»Ñ Ð¸Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ð¸)
SERVICES = {
    "nails": {
        "name": "ðŸ’… ÐÐ¾Ð³Ñ‚ÐµÐ²Ð¾Ð¹ ÑÐµÑ€Ð²Ð¸Ñ",
        "services": ["ÐœÐ°Ð½Ð¸ÐºÑŽÑ€ - 1500â‚½", "ÐŸÐµÐ´Ð¸ÐºÑŽÑ€ - 2000â‚½", "Ð“ÐµÐ»ÑŒ-Ð»Ð°Ðº - 1200â‚½"],
        "duration": 90
    },
    "hair": {
        "name": "ðŸ’‡â€â™€ï¸ ÐŸÐ°Ñ€Ð¸ÐºÐ¼Ð°Ñ…ÐµÑ€ÑÐºÐ¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð¸", 
        "services": ["Ð¡Ñ‚Ñ€Ð¸Ð¶ÐºÐ° Ð¶ÐµÐ½ÑÐºÐ°Ñ - 2500â‚½", "ÐžÐºÑ€Ð°ÑˆÐ¸Ð²Ð°Ð½Ð¸Ðµ - 4500â‚½", "Ð£ÐºÐ»Ð°Ð´ÐºÐ° - 1500â‚½"],
        "duration": 120
    },
    "makeup": {
        "name": "ðŸ’„ ÐŸÐµÑ€Ð¼Ð°Ð½ÐµÐ½Ñ‚Ð½Ñ‹Ð¹ Ð¼Ð°ÐºÐ¸ÑÐ¶",
        "services": ["Ð‘Ñ€Ð¾Ð²Ð¸ - 8000â‚½", "Ð“ÑƒÐ±Ñ‹ - 12000â‚½", "Ð’ÐµÐºÐ¸ - 10000â‚½"],
        "duration": 150
    }
}

MASTERS = {
    "nails": ["ÐÐ½Ð½Ð° Ð˜Ð²Ð°Ð½Ð¾Ð²Ð°", "ÐœÐ°Ñ€Ð¸Ñ ÐŸÐµÑ‚Ñ€Ð¾Ð²Ð°"],
    "hair": ["Ð•Ð»ÐµÐ½Ð° Ð¡Ð¸Ð´Ð¾Ñ€Ð¾Ð²Ð°", "ÐžÐ»ÑŒÐ³Ð° ÐšÐ¾Ð·Ð»Ð¾Ð²Ð°"],
    "makeup": ["Ð¡Ð²ÐµÑ‚Ð»Ð°Ð½Ð° ÐÐ¸ÐºÐ¾Ð»Ð°ÐµÐ²Ð°"]
}

WORK_HOURS = list(range(9, 19))

SALON_INFO = {
    "name": "Ð¡Ð°Ð»Ð¾Ð½ ÐºÑ€Ð°ÑÐ¾Ñ‚Ñ‹ 'Ð­Ð»ÐµÐ³Ð°Ð½Ñ'",
    "phone": "+7 (999) 123-45-67", 
    "address": "ÑƒÐ». ÐšÑ€Ð°ÑÐ¾Ñ‚Ñ‹, Ð´Ð¾Ð¼ 10"
}

# ============ ÐÐ”ÐœÐ˜ÐÐ˜Ð¡Ð¢Ð ÐÐ¢ÐžÐ Ð« ============
ADMIN_IDS = [
    412594355, 1360974844, 930316589
]

def is_admin(user_id: int) -> bool:
    """ÐŸÑ€Ð¾Ð²ÐµÑ€ÐºÐ° Ð¿Ñ€Ð°Ð² Ð°Ð´Ð¼Ð¸Ð½Ð¸ÑÑ‚Ñ€Ð°Ñ‚Ð¾Ñ€Ð°"""
    return user_id in ADMIN_IDS

print(f"ðŸ‘‘ ÐÐ°ÑÑ‚Ñ€Ð¾ÐµÐ½Ð¾ Ð°Ð´Ð¼Ð¸Ð½Ð¸ÑÑ‚Ñ€Ð°Ñ‚Ð¾Ñ€Ð¾Ð²: {len(ADMIN_IDS)}")

class Database:
    def __init__(self):
        self.init_db()
        logger.info("ðŸ’¾ Ð‘Ð°Ð·Ð° Ð´Ð°Ð½Ð½Ñ‹Ñ… Ð¸Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð°")
    
    def init_db(self):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    phone TEXT,
                    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS appointments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    service_type TEXT,
                    master TEXT,
                    appointment_date TEXT,
                    appointment_time TEXT,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Ð¢Ð°Ð±Ð»Ð¸Ñ†Ð° Ð´Ð»Ñ ÑƒÑÐ»ÑƒÐ³
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS services (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    service_key TEXT UNIQUE NOT NULL,
                    service_name TEXT NOT NULL,
                    service_items TEXT NOT NULL,
                    duration INTEGER DEFAULT 90,
                    is_active INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Ð¢Ð°Ð±Ð»Ð¸Ñ†Ð° Ð´Ð»Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð²
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS masters (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    master_name TEXT NOT NULL,
                    service_key TEXT NOT NULL,
                    is_active INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(master_name, service_key)
                )
            ''')
            
            # Ð˜Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ Ð´Ð°Ð½Ð½Ñ‹Ñ… Ð¸Ð· Ð³Ð»Ð¾Ð±Ð°Ð»ÑŒÐ½Ñ‹Ñ… Ð¿ÐµÑ€ÐµÐ¼ÐµÐ½Ð½Ñ‹Ñ… (ÐµÑÐ»Ð¸ Ñ‚Ð°Ð±Ð»Ð¸Ñ†Ñ‹ Ð¿ÑƒÑÑ‚Ñ‹Ðµ)
            cursor.execute('SELECT COUNT(*) FROM services')
            if cursor.fetchone()[0] == 0:
                self._init_default_services(cursor)
            
            cursor.execute('SELECT COUNT(*) FROM masters')
            if cursor.fetchone()[0] == 0:
                self._init_default_masters(cursor)
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¸Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ð¸ Ð‘Ð”: {e}")
            raise
    
    def _init_default_services(self, cursor):
        """Ð˜Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ ÑƒÑÐ»ÑƒÐ³ Ð¸Ð· SERVICES"""
        for key, service_data in SERVICES.items():
            service_items = '\n'.join(service_data['services'])
            cursor.execute('''
                INSERT INTO services (service_key, service_name, service_items, duration)
                VALUES (?, ?, ?, ?)
            ''', (key, service_data['name'], service_items, service_data['duration']))
        logger.info("âœ… Ð£ÑÐ»ÑƒÐ³Ð¸ Ð¸Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð¸Ñ€Ð¾Ð²Ð°Ð½Ñ‹ Ð¸Ð· ÐºÐ¾Ð½Ñ„Ð¸Ð³ÑƒÑ€Ð°Ñ†Ð¸Ð¸")
    
    def _init_default_masters(self, cursor):
        """Ð˜Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð² Ð¸Ð· MASTERS"""
        for service_key, masters_list in MASTERS.items():
            for master_name in masters_list:
                cursor.execute('''
                    INSERT INTO masters (master_name, service_key)
                    VALUES (?, ?)
                ''', (master_name, service_key))
        logger.info("âœ… ÐœÐ°ÑÑ‚ÐµÑ€Ð° Ð¸Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð¸Ñ€Ð¾Ð²Ð°Ð½Ñ‹ Ð¸Ð· ÐºÐ¾Ð½Ñ„Ð¸Ð³ÑƒÑ€Ð°Ñ†Ð¸Ð¸")
    
    # ============ ÐœÐ•Ð¢ÐžÐ”Ð« Ð”Ð›Ð¯ Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð¯ Ð£Ð¡Ð›Ð£Ð“ÐÐœÐ˜ ============
    
    def get_all_services(self) -> List[Dict]:
        """ÐŸÐ¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð²ÑÐµ Ð°ÐºÑ‚Ð¸Ð²Ð½Ñ‹Ðµ ÑƒÑÐ»ÑƒÐ³Ð¸"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM services WHERE is_active = 1')
            services = cursor.fetchall()
            conn.close()
            
            result = []
            for service in services:
                result.append({
                    'id': service[0],
                    'key': service[1],
                    'name': service[2],
                    'items': service[3],
                    'duration': service[4]
                })
            return result
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³: {e}")
            return []
    
    def add_service(self, service_key: str, service_name: str, service_items: str, duration: int):
        """Ð”Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ Ð½Ð¾Ð²ÑƒÑŽ ÑƒÑÐ»ÑƒÐ³Ñƒ"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO services (service_key, service_name, service_items, duration)
                VALUES (?, ?, ?, ?)
            ''', (service_key, service_name, service_items, duration))
            conn.commit()
            conn.close()
            logger.info(f"âœ… Ð£ÑÐ»ÑƒÐ³Ð° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð°: {service_name}")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"âš ï¸ Ð£ÑÐ»ÑƒÐ³Ð° Ñ ÐºÐ»ÑŽÑ‡Ð¾Ð¼ {service_key} ÑƒÐ¶Ðµ ÑÑƒÑ‰ÐµÑÑ‚Ð²ÑƒÐµÑ‚")
            return False
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸: {e}")
            return False
    
    def delete_service(self, service_key: str):
        """Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ ÑƒÑÐ»ÑƒÐ³Ñƒ (Ð´ÐµÐ°ÐºÑ‚Ð¸Ð²Ð¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE services SET is_active = 0 WHERE service_key = ?', (service_key,))
            conn.commit()
            conn.close()
            logger.info(f"âœ… Ð£ÑÐ»ÑƒÐ³Ð° Ð´ÐµÐ°ÐºÑ‚Ð¸Ð²Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð°: {service_key}")
            return True
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸: {e}")
            return False
    
    # ============ ÐœÐ•Ð¢ÐžÐ”Ð« Ð”Ð›Ð¯ Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð¯ ÐœÐÐ¡Ð¢Ð•Ð ÐÐœÐ˜ ============
    
    def get_all_masters(self) -> List[Dict]:
        """ÐŸÐ¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð²ÑÐµÑ… Ð°ÐºÑ‚Ð¸Ð²Ð½Ñ‹Ñ… Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð²"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT m.id, m.master_name, m.service_key, s.service_name
                FROM masters m
                LEFT JOIN services s ON m.service_key = s.service_key
                WHERE m.is_active = 1
                ORDER BY m.service_key, m.master_name
            ''')
            masters = cursor.fetchall()
            conn.close()
            
            result = []
            for master in masters:
                result.append({
                    'id': master[0],
                    'name': master[1],
                    'service_key': master[2],
                    'service_name': master[3] or 'ÐÐµÐ¸Ð·Ð²ÐµÑÑ‚Ð½Ð°Ñ ÑƒÑÐ»ÑƒÐ³Ð°'
                })
            return result
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð²: {e}")
            return []
    
    def get_masters_by_service(self, service_key: str) -> List[str]:
        """ÐŸÐ¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð² Ð¿Ð¾ Ñ‚Ð¸Ð¿Ñƒ ÑƒÑÐ»ÑƒÐ³Ð¸"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT master_name FROM masters 
                WHERE service_key = ? AND is_active = 1
            ''', (service_key,))
            masters = cursor.fetchall()
            conn.close()
            return [m[0] for m in masters]
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð² ÑƒÑÐ»ÑƒÐ³Ð¸: {e}")
            return []
    
    def add_master(self, master_name: str, service_key: str):
        """Ð”Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO masters (master_name, service_key)
                VALUES (?, ?)
            ''', (master_name, service_key))
            conn.commit()
            conn.close()
            logger.info(f"âœ… ÐœÐ°ÑÑ‚ÐµÑ€ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½: {master_name} ({service_key})")
            return True
        except sqlite3.IntegrityError:
            logger.warning(f"âš ï¸ ÐœÐ°ÑÑ‚ÐµÑ€ {master_name} ÑƒÐ¶Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ð°ÐµÑ‚ Ñ ÑƒÑÐ»ÑƒÐ³Ð¾Ð¹ {service_key}")
            return False
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°: {e}")
            return False
    
    def delete_master(self, master_id: int):
        """Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ Ð¼Ð°ÑÑ‚ÐµÑ€Ð° (Ð´ÐµÐ°ÐºÑ‚Ð¸Ð²Ð¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('UPDATE masters SET is_active = 0 WHERE id = ?', (master_id,))
            conn.commit()
            conn.close()
            logger.info(f"âœ… ÐœÐ°ÑÑ‚ÐµÑ€ Ð´ÐµÐ°ÐºÑ‚Ð¸Ð²Ð¸Ñ€Ð¾Ð²Ð°Ð½: ID {master_id}")
            return True
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°: {e}")
            return False
    
    # ============ Ð¡Ð£Ð©Ð•Ð¡Ð¢Ð’Ð£Ð®Ð©Ð˜Ð• ÐœÐ•Ð¢ÐžÐ”Ð« ============
    
    def is_user_registered(self, user_id: int) -> bool:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¾Ð²ÐµÑ€ÐºÐ¸ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ: {e}")
            return False
    
    def register_user(self, user_id: int, name: str, phone: str):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR REPLACE INTO users (user_id, name, phone) VALUES (?, ?, ?)',
                (user_id, name, phone)
            )
            conn.commit()
            conn.close()
            logger.info(f"ðŸ‘¤ Ð—Ð°Ñ€ÐµÐ³Ð¸ÑÑ‚Ñ€Ð¸Ñ€Ð¾Ð²Ð°Ð½: {name} (ID: {user_id})")
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ñ€ÐµÐ³Ð¸ÑÑ‚Ñ€Ð°Ñ†Ð¸Ð¸ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ: {e}")
    
    def create_appointment(self, user_id: int, service_type: str, master: str, date: str, time: str):
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO appointments (user_id, service_type, master, appointment_date, appointment_time) VALUES (?, ?, ?, ?, ?)',
                (user_id, service_type, master, date, time)
            )
            conn.commit()
            conn.close()
            logger.info(f"ðŸ“… Ð—Ð°Ð¿Ð¸ÑÑŒ ÑÐ¾Ð·Ð´Ð°Ð½Ð°: {date} {time} Ð´Ð»Ñ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ {user_id}")
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸: {e}")
    
    def get_user_appointments(self, user_id: int) -> List[Dict]:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT service_type, master, appointment_date, appointment_time FROM appointments WHERE user_id = ? AND status = "active"',
                (user_id,)
            )
            appointments = cursor.fetchall()
            conn.close()
            
            result = []
            for apt in appointments:
                result.append({
                    'service_type': apt[0],
                    'master': apt[1],
                    'date': apt[2],
                    'time': apt[3]
                })
            return result
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¸Ñ Ð·Ð°Ð¿Ð¸ÑÐµÐ¹: {e}")
            return []
    
    def is_time_available(self, master: str, date: str, time: str) -> bool:
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id FROM appointments WHERE master = ? AND appointment_date = ? AND appointment_time = ? AND status = "active"',
                (master, date, time)
            )
            result = cursor.fetchone()
            conn.close()
            return result is None
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¾Ð²ÐµÑ€ÐºÐ¸ Ð´Ð¾ÑÑ‚ÑƒÐ¿Ð½Ð¾ÑÑ‚Ð¸ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸: {e}")
            return False
    
    def get_statistics(self) -> Dict:
        """ÐŸÐ¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ ÑÑ‚Ð°Ñ‚Ð¸ÑÑ‚Ð¸ÐºÑƒ ÑÐ°Ð»Ð¾Ð½Ð° (Ð´Ð»Ñ Ð°Ð´Ð¼Ð¸Ð½Ð°)"""
        try:
            conn = sqlite3.connect('salon_bot.db')
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
            active_appointments = cursor.fetchone()[0]
            
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE appointment_date = ? AND status = "active"', (today,))
            today_appointments = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments')
            total_appointments = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_users': total_users,
                'active_appointments': active_appointments,
                'today_appointments': today_appointments,
                'total_appointments': total_appointments
            }
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¸Ñ ÑÑ‚Ð°Ñ‚Ð¸ÑÑ‚Ð¸ÐºÐ¸: {e}")
            return {
                'total_users': 0,
                'active_appointments': 0,
                'today_appointments': 0,
                'total_appointments': 0
            }

# Ð“Ð»Ð¾Ð±Ð°Ð»ÑŒÐ½Ñ‹Ðµ Ð¿ÐµÑ€ÐµÐ¼ÐµÐ½Ð½Ñ‹Ðµ
db = Database()
user_states = {}
user_data = {}

class SalonBot:
    def __init__(self):
        self.application = (
            Application.builder()
            .token(BOT_TOKEN)
            .connect_timeout(30.0)
            .read_timeout(30.0)
            .write_timeout(30.0)
            .pool_timeout(30.0)
            .get_updates_read_timeout(42.0)
            .build()
        )
        self.setup_handlers()
        self.running = False
        logger.info("âš™ï¸ ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ¸ Ð½Ð°ÑÑ‚Ñ€Ð¾ÐµÐ½Ñ‹")
    
    def setup_handlers(self):
        """ÐÐ°ÑÑ‚Ñ€Ð¾Ð¹ÐºÐ° Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ¾Ð² ÐºÐ¾Ð¼Ð°Ð½Ð´ Ð¸ ÑÐ¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ð¹"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸Ðº Ð¾ÑˆÐ¸Ð±Ð¾Ðº"""
        logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¸ Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐµ Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ: {context.error}")
        
        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "ðŸ˜” ÐŸÑ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð° Ð¾ÑˆÐ¸Ð±ÐºÐ°. ÐŸÐ¾Ð¿Ñ€Ð¾Ð±ÑƒÐ¹Ñ‚Ðµ ÐµÑ‰Ðµ Ñ€Ð°Ð· Ð¸Ð»Ð¸ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start"
                )
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¸ Ð¾Ñ‚Ð¿Ñ€Ð°Ð²ÐºÐµ ÑÐ¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ñ Ð¾Ð± Ð¾ÑˆÐ¸Ð±ÐºÐµ: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸Ðº ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ‹ /start"""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.first_name or "Ð“Ð¾ÑÑ‚ÑŒ"
            user_states[user_id] = UserState.MAIN_MENU
            
            admin_badge = " ðŸ‘‘" if is_admin(user_id) else ""
            
            logger.info(f"ðŸ‘‹ ÐŸÐ¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÑŒ: {username} (ID: {user_id}){admin_badge}")
            
            welcome_text = (
                f"ðŸ‘‹ Ð”Ð¾Ð±Ñ€Ð¾ Ð¿Ð¾Ð¶Ð°Ð»Ð¾Ð²Ð°Ñ‚ÑŒ Ð² {SALON_INFO['name']}, {username}!{admin_badge}\n\n"
                f"ðŸŒŸ Ð¯ Ð¿Ð¾Ð¼Ð¾Ð³Ñƒ Ð²Ð°Ð¼:\n"
                f"ðŸ“… Ð—Ð°Ð¿Ð¸ÑÐ°Ñ‚ÑŒÑÑ Ð½Ð° Ð¿Ñ€Ð¾Ñ†ÐµÐ´ÑƒÑ€Ñƒ\n"
                f"ðŸ“‹ Ð£Ð·Ð½Ð°Ñ‚ÑŒ Ñ†ÐµÐ½Ñ‹\n"
                f"ðŸ‘©â€ðŸ’» ÐŸÐ¾Ð·Ð½Ð°ÐºÐ¾Ð¼Ð¸Ñ‚ÑŒÑÑ Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ð¼Ð¸\n\n"
                f"ðŸ“ {SALON_INFO['address']}\n"
                f"ðŸ“ž {SALON_INFO['phone']}\n\n"
                f"Ð§Ñ‚Ð¾ Ð²Ð°Ñ Ð¸Ð½Ñ‚ÐµÑ€ÐµÑÑƒÐµÑ‚?"
            )
            
            keyboard = [
                [InlineKeyboardButton("ðŸ“… Ð—Ð°Ð¿Ð¸ÑÐ°Ñ‚ÑŒÑÑ", callback_data="book")],
                [InlineKeyboardButton("ðŸ“‹ Ð£ÑÐ»ÑƒÐ³Ð¸ Ð¸ Ñ†ÐµÐ½Ñ‹", callback_data="services")],
                [InlineKeyboardButton("ðŸ‘©â€ðŸ’» ÐÐ°ÑˆÐ¸ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°", callback_data="masters")],
                [InlineKeyboardButton("ðŸŽ¯ ÐÐºÑ†Ð¸Ð¸", callback_data="promotions")],
                [InlineKeyboardButton("ðŸ“± ÐœÐ¾Ð¸ Ð·Ð°Ð¿Ð¸ÑÐ¸", callback_data="my_bookings")]
            ]
            
            if is_admin(user_id):
                keyboard.append([InlineKeyboardButton("ðŸ‘‘ ÐÐ´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»ÑŒ", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² start_command: {e}")
            await update.message.reply_text("ðŸ˜” ÐŸÑ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð° Ð¾ÑˆÐ¸Ð±ÐºÐ°. ÐŸÐ¾Ð¿Ñ€Ð¾Ð±ÑƒÐ¹Ñ‚Ðµ ÐµÑ‰Ðµ Ñ€Ð°Ð·: /start")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸Ðº Ð½Ð°Ð¶Ð°Ñ‚Ð¸Ð¹ Ð½Ð° ÐºÐ½Ð¾Ð¿ÐºÐ¸"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        logger.info(f"ðŸ“˜ ÐšÐ½Ð¾Ð¿ÐºÐ°: {data} Ð¾Ñ‚ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ {user_id}")
        
        try:
            if data == "services":
                await self.show_services(query)
            elif data == "book":
                await self.start_booking(query)
            elif data == "masters":
                await self.show_masters(query)
            elif data == "promotions":
                await self.show_promotions(query)
            elif data == "my_bookings":
                await self.show_user_bookings(query)
            elif data == "admin_panel":
                if is_admin(user_id):
                    await self.show_admin_panel(query)
                else:
                    await query.answer("âŒ Ð£ Ð²Ð°Ñ Ð½ÐµÑ‚ Ð´Ð¾ÑÑ‚ÑƒÐ¿Ð° Ðº Ð°Ð´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»Ð¸", show_alert=True)
            # ÐÐ¾Ð²Ñ‹Ðµ Ð°Ð´Ð¼Ð¸Ð½-Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ¸
            elif data == "admin_manage_services":
                if is_admin(user_id):
                    await self.show_services_management(query)
            elif data == "admin_manage_masters":
                if is_admin(user_id):
                    await self.show_masters_management(query)
            elif data == "admin_add_service":
                if is_admin(user_id):
                    await self.start_add_service(query)
            elif data == "admin_add_master":
                if is_admin(user_id):
                    await self.start_add_master(query)
            elif data.startswith("admin_delete_service_"):
                if is_admin(user_id):
                    service_key = data.replace("admin_delete_service_", "")
                    await self.delete_service(query, service_key)
            elif data.startswith("admin_delete_master_"):
                if is_admin(user_id):
                    master_id = int(data.replace("admin_delete_master_", ""))
                    await self.delete_master(query, master_id)
            elif data.startswith("admin_add_master_service_"):
                if is_admin(user_id):
                    service_key = data.replace("admin_add_master_service_", "")
                    # Инициализация user_data если нет
                    if user_id not in user_data:
                        user_data[user_id] = {}
                    user_data[user_id]['new_master_service'] = service_key
                    user_states[user_id] = UserState.ADDING_MASTER
                    text = f"ðŸ‘¤ **Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°**\n\nÐÐ°Ð¿Ð¸ÑˆÐ¸Ñ‚Ðµ Ð¸Ð¼Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°:"
                    await query.edit_message_text(text, parse_mode='Markdown')
            elif data.startswith("service_"):
                await self.select_service(query, data)
            elif data.startswith("date_"):
                await self.select_date(query, data)
            elif data.startswith("time_"):
                await self.select_time(query, data)
            elif data == "back_to_menu":
                await self.back_to_main_menu(query)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² handle_callback: {e}")
            await query.message.reply_text("ðŸ˜” ÐŸÑ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð° Ð¾ÑˆÐ¸Ð±ÐºÐ°. ÐŸÐ¾Ð¿Ñ€Ð¾Ð±ÑƒÐ¹Ñ‚Ðµ ÐµÑ‰Ðµ Ñ€Ð°Ð·: /start")
    
    # ============ ÐÐžÐ’Ð«Ð• ÐÐ”ÐœÐ˜Ð-ÐœÐ•Ð¢ÐžÐ”Ð« ============
    
    async def show_admin_panel(self, query):
        """Ð“Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ Ð°Ð´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»Ð¸"""
        try:
            text = (
                f"ðŸ‘‘ **ÐÐ”ÐœÐ˜Ð-ÐŸÐÐÐ•Ð›Ð¬**\n"
                f"{SALON_INFO['name']}\n\n"
                f"Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð´ÐµÐ¹ÑÑ‚Ð²Ð¸Ðµ:"
            )
            
            keyboard = [
                [InlineKeyboardButton("ðŸ‘¥ Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ð¼Ð¸", callback_data="admin_manage_masters")],
                [InlineKeyboardButton("ðŸ’… Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð°Ð¼Ð¸", callback_data="admin_manage_services")],
                [InlineKeyboardButton("ðŸ“Š Ð¡Ñ‚Ð°Ñ‚Ð¸ÑÑ‚Ð¸ÐºÐ°", callback_data="admin_stats")],
                [InlineKeyboardButton("ðŸ”™ Ð“Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_admin_panel: {e}")
    
    async def show_services_management(self, query):
        """Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð°Ð¼Ð¸"""
        try:
            services = db.get_all_services()
            
            text = f"ðŸ’… **Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð• Ð£Ð¡Ð›Ð£Ð“ÐÐœÐ˜**\n\nÐ’ÑÐµÐ³Ð¾ ÑƒÑÐ»ÑƒÐ³: {len(services)}\n\n"
            
            if services:
                for service in services:
                    text += f"â–ªï¸ **{service['name']}**\n"
                    text += f"   ÐšÐ»ÑŽÑ‡: `{service['key']}`\n"
                    text += f"   Ð”Ð»Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚ÑŒ: {service['duration']} Ð¼Ð¸Ð½\n\n"
            else:
                text += "âŒ Ð£ÑÐ»ÑƒÐ³ Ð¿Ð¾ÐºÐ° Ð½ÐµÑ‚"
            
            keyboard = [
                [InlineKeyboardButton("âž• Ð”Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ ÑƒÑÐ»ÑƒÐ³Ñƒ", callback_data="admin_add_service")]
            ]
            
            # ÐšÐ½Ð¾Ð¿ÐºÐ¸ ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"ðŸ—‘ Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ: {service['name']}", 
                        callback_data=f"admin_delete_service_{service['key']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("ðŸ”™ ÐÐ´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»ÑŒ", callback_data="admin_panel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_services_management: {e}")
    
    async def show_masters_management(self, query):
        """Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ð¼Ð¸"""
        try:
            masters = db.get_all_masters()
            
            text = f"ðŸ‘¥ **Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð• ÐœÐÐ¡Ð¢Ð•Ð ÐÐœÐ˜**\n\nÐ’ÑÐµÐ³Ð¾ Ð¼Ð°ÑÑ‚ÐµÑ€Ð¾Ð²: {len(masters)}\n\n"
            
            if masters:
                current_service = None
                for master in masters:
                    if current_service != master['service_name']:
                        current_service = master['service_name']
                        text += f"\n**{current_service}:**\n"
                    text += f"â–ªï¸ {master['name']}\n"
            else:
                text += "âŒ ÐœÐ°ÑÑ‚ÐµÑ€Ð¾Ð² Ð¿Ð¾ÐºÐ° Ð½ÐµÑ‚"
            
            keyboard = []
            
            # ÐšÐ½Ð¾Ð¿ÐºÐ¸ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¿Ð¾ ÑƒÑÐ»ÑƒÐ³Ð°Ð¼
            services = db.get_all_services()
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"âž• Ð”Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ Ð²: {service['name']}", 
                        callback_data=f"admin_add_master_service_{service['key']}"
                    )
                ])
            
            # ÐšÐ½Ð¾Ð¿ÐºÐ¸ ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ
            for master in masters:
                keyboard.append([
                    InlineKeyboardButton(
                        f"ðŸ—‘ Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ: {master['name']}", 
                        callback_data=f"admin_delete_master_{master['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("ðŸ”™ ÐÐ´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»ÑŒ", callback_data="admin_panel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_masters_management: {e}")
    
    async def start_add_service(self, query):
        """ÐÐ°Ñ‡Ð°Ñ‚ÑŒ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð¸"""
        user_id = query.from_user.id
        user_states[user_id] = UserState.ADDING_SERVICE
        # Инициализация user_data если нет
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['adding_service'] = {}
        
        text = (
            f"ðŸ’… **Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð½Ð¾Ð²Ð¾Ð¹ ÑƒÑÐ»ÑƒÐ³Ð¸**\n\n"
            f"Ð¨Ð°Ð³ 1 Ð¸Ð· 4: Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ»ÑŽÑ‡ ÑƒÑÐ»ÑƒÐ³Ð¸\n"
            f"(Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€: `nails`, `hair`, `massage`)\n\n"
            f"ÐšÐ»ÑŽÑ‡ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±Ñ‹Ñ‚ÑŒ ÑƒÐ½Ð¸ÐºÐ°Ð»ÑŒÐ½Ñ‹Ð¼, Ð½Ð° Ð°Ð½Ð³Ð»Ð¸Ð¹ÑÐºÐ¾Ð¼, Ð±ÐµÐ· Ð¿Ñ€Ð¾Ð±ÐµÐ»Ð¾Ð²"
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
    
    async def start_add_master(self, query):
        """ÐÐ°Ñ‡Ð°Ñ‚ÑŒ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¼Ð°ÑÑ‚ÐµÑ€Ð° (Ð²Ñ‹Ð±Ð¾Ñ€ ÑƒÑÐ»ÑƒÐ³Ð¸ ÑƒÐ¶Ðµ Ð¿Ñ€Ð¾Ð¸Ð·Ð¾ÑˆÐµÐ»)"""
        # Ð¡Ð¾ÑÑ‚Ð¾ÑÐ½Ð¸Ðµ ÑƒÑÑ‚Ð°Ð½Ð°Ð²Ð»Ð¸Ð²Ð°ÐµÑ‚ÑÑ Ð² Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐµ callback admin_add_master_service_
        pass
    
    async def delete_service(self, query, service_key):
        """Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ ÑƒÑÐ»ÑƒÐ³Ñƒ"""
        try:
            success = db.delete_service(service_key)
            
            if success:
                text = f"âœ… Ð£ÑÐ»ÑƒÐ³Ð° ÑƒÑÐ¿ÐµÑˆÐ½Ð¾ ÑƒÐ´Ð°Ð»ÐµÐ½Ð°: {service_key}"
            else:
                text = f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸"
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð°Ð¼Ð¸", callback_data="admin_manage_services")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² delete_service: {e}")
    
    async def delete_master(self, query, master_id):
        """Ð£Ð´Ð°Ð»Ð¸Ñ‚ÑŒ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°"""
        try:
            success = db.delete_master(master_id)
            
            if success:
                text = f"âœ… ÐœÐ°ÑÑ‚ÐµÑ€ ÑƒÑÐ¿ÐµÑˆÐ½Ð¾ ÑƒÐ´Ð°Ð»ÐµÐ½"
            else:
                text = f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°"
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ Ð£Ð¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ð¼Ð¸", callback_data="admin_manage_masters")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² delete_master: {e}")
    
    # ============ Ð¡Ð£Ð©Ð•Ð¡Ð¢Ð’Ð£Ð®Ð©Ð˜Ð• ÐœÐ•Ð¢ÐžÐ”Ð« (ÑƒÐºÐ¾Ñ€Ð¾Ñ‡ÐµÐ½Ð½Ñ‹Ðµ Ð´Ð»Ñ ÑÐºÐ¾Ð½Ð¾Ð¼Ð¸Ð¸ Ð¼ÐµÑÑ‚Ð°) ============
    
    async def show_services(self, query):
        """ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ ÑƒÑÐ»ÑƒÐ³Ð¸"""
        try:
            services = db.get_all_services()
            text = f"ðŸ“‹ **Ð£ÑÐ»ÑƒÐ³Ð¸ {SALON_INFO['name']}**\n\n"
            
            for service in services:
                text += f"**{service['name']}**\n"
                for item in service['items'].split('\n'):
                    text += f"â€¢ {item}\n"
                text += f"â± {service['duration']} Ð¼Ð¸Ð½\n\n"
            
            text += f"ðŸ“ž {SALON_INFO['phone']}\n"
            text += f"ðŸ“ {SALON_INFO['address']}"
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_services: {e}")
    
    async def start_booking(self, query):
        """ÐÐ°Ñ‡Ð°Ñ‚ÑŒ Ð¿Ñ€Ð¾Ñ†ÐµÑÑ Ð·Ð°Ð¿Ð¸ÑÐ¸"""
        try:
            user_id = query.from_user.id
            user_states[user_id] = UserState.SELECTING_SERVICE
            
            services = db.get_all_services()
            text = "ðŸ“… **Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ ÑƒÑÐ»ÑƒÐ³Ñƒ:**"
            
            keyboard = []
            for service in services:
                keyboard.append([InlineKeyboardButton(
                    service['name'], 
                    callback_data=f"service_{service['key']}"
                )])
            
            keyboard.append([InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² start_booking: {e}")
    
    async def select_service(self, query, callback_data):
        """Ð’Ñ‹Ð±Ð¾Ñ€ ÑƒÑÐ»ÑƒÐ³Ð¸ Ð¸ Ð¾Ñ‚Ð¾Ð±Ñ€Ð°Ð¶ÐµÐ½Ð¸Ðµ Ð´Ð°Ñ‚"""
        try:
            user_id = query.from_user.id
            service_key = callback_data.replace("service_", "")
            
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]['service_type'] = service_key
            
            # ÐŸÐ¾Ð»ÑƒÑ‡Ð°ÐµÐ¼ ÑƒÑÐ»ÑƒÐ³Ñƒ Ð¸Ð· Ð‘Ð”
            services = db.get_all_services()
            service_info = next((s for s in services if s['key'] == service_key), None)
            
            if not service_info:
                await query.answer("âŒ Ð£ÑÐ»ÑƒÐ³Ð° Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð°", show_alert=True)
                return
            
            text = f"**{service_info['name']}**\n\n"
            for item in service_info['items'].split('\n'):
                text += f"â€¢ {item}\n"
            text += f"\nâ± {service_info['duration']} Ð¼Ð¸Ð½\n\n"
            
            # Ð“ÐµÐ½ÐµÑ€Ð°Ñ†Ð¸Ñ Ð´Ð°Ñ‚
            available_dates = []
            for i in range(1, 8):
                date = datetime.now() + timedelta(days=i)
                if date.weekday() < 6:
                    available_dates.append(date)
            
            if available_dates:
                text += "ðŸ“… **Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð´Ð°Ñ‚Ñƒ:**"
                keyboard = []
                for date in available_dates:
                    date_str = date.strftime("%Y-%m-%d")
                    date_display = date.strftime("%d.%m (%a)")
                    days = {'Mon': 'ÐŸÐ½', 'Tue': 'Ð’Ñ‚', 'Wed': 'Ð¡Ñ€', 'Thu': 'Ð§Ñ‚', 'Fri': 'ÐŸÑ‚', 'Sat': 'Ð¡Ð±'}
                    for eng, rus in days.items():
                        date_display = date_display.replace(eng, rus)
                    keyboard.append([InlineKeyboardButton(date_display, callback_data=f"date_{date_str}")])
                
                keyboard.append([InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="book")])
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                text += "âŒ **ÐÐµÑ‚ Ð´Ð°Ñ‚**"
                keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² select_service: {e}")
    
    async def select_date(self, query, callback_data):
        """Ð’Ñ‹Ð±Ð¾Ñ€ Ð´Ð°Ñ‚Ñ‹ Ð¸ Ð¾Ñ‚Ð¾Ð±Ñ€Ð°Ð¶ÐµÐ½Ð¸Ðµ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸"""
        try:
            user_id = query.from_user.id
            selected_date = callback_data.replace("date_", "")
            user_data[user_id]['date'] = selected_date
            
            service_type = user_data[user_id]['service_type']
            masters = db.get_masters_by_service(service_type)
            
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            text = f"ðŸ“… **{formatted_date}**\nâ° **Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð²Ñ€ÐµÐ¼Ñ:**"
            
            keyboard = []
            for hour in WORK_HOURS:
                time_str = f"{hour:02d}:00"
                available = any(db.is_time_available(master, selected_date, time_str) for master in masters)
                if available:
                    keyboard.append([InlineKeyboardButton(time_str, callback_data=f"time_{time_str}")])
            
            if keyboard:
                keyboard.append([InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data=f"service_{service_type}")])
            else:
                text += "\nâŒ **ÐÐµÑ‚ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸**"
                keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data=f"service_{service_type}")]]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² select_date: {e}")
    
    async def select_time(self, query, callback_data):
        """Ð’Ñ‹Ð±Ð¾Ñ€ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸"""
        try:
            user_id = query.from_user.id
            selected_time = callback_data.replace("time_", "")
            user_data[user_id]['time'] = selected_time
            
            if not db.is_user_registered(user_id):
                user_states[user_id] = UserState.AWAITING_NAME
                
                text = (
                    f"ðŸ“ **Ð”Ð»Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð½ÑƒÐ¶Ð½Ð° Ñ€ÐµÐ³Ð¸ÑÑ‚Ñ€Ð°Ñ†Ð¸Ñ**\n\n"
                    f"ðŸ‘¤ Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð²Ð°ÑˆÐµ Ð¸Ð¼Ñ:"
                )
                await query.edit_message_text(text, parse_mode='Markdown')
            else:
                await self.confirm_booking(query)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² select_time: {e}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸Ðº Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ñ‹Ñ… ÑÐ¾Ð¾Ð±Ñ‰ÐµÐ½Ð¸Ð¹"""
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            if user_id not in user_states:
                await self.start_command(update, context)
                return
            
            state = user_states[user_id]
            
            if state == UserState.AWAITING_NAME:
                user_data[user_id]['name'] = text.strip()
                user_states[user_id] = UserState.AWAITING_PHONE
                
                await update.message.reply_text(f"ðŸ‘ ÐŸÑ€Ð¸ÑÑ‚Ð½Ð¾ Ð¿Ð¾Ð·Ð½Ð°ÐºÐ¾Ð¼Ð¸Ñ‚ÑŒÑÑ, {text}!\nðŸ“ž Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð½Ð¾Ð¼ÐµÑ€ Ñ‚ÐµÐ»ÐµÑ„Ð¾Ð½Ð°:")
            
            elif state == UserState.AWAITING_PHONE:
                user_data[user_id]['phone'] = text.strip()
                
                db.register_user(user_id, user_data[user_id]['name'], user_data[user_id]['phone'])
                await self.complete_booking(update)
            
            # ÐÐ¾Ð²Ñ‹Ðµ ÑÐ¾ÑÑ‚Ð¾ÑÐ½Ð¸Ñ Ð´Ð»Ñ Ð°Ð´Ð¼Ð¸Ð½Ð°
            elif state == UserState.ADDING_SERVICE:
                await self.process_add_service(update, text)
            
            elif state == UserState.ADDING_SERVICE_ITEMS:
                await self.process_add_service_items(update, text)
            
            elif state == UserState.ADDING_SERVICE_DURATION:
                await self.process_add_service_duration(update, text)
            
            elif state == UserState.ADDING_MASTER:
                await self.process_add_master(update, text)
                
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² handle_text: {e}")
    
    async def process_add_service(self, update, text):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸ - ÑˆÐ°Ð³ 1 (ÐºÐ»ÑŽÑ‡)"""
        user_id = update.effective_user.id
        service_key = text.strip().lower().replace(' ', '_')
        
        user_data[user_id]['adding_service']['key'] = service_key
        
        reply_text = (
            f"ðŸ’… **Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð½Ð¾Ð²Ð¾Ð¹ ÑƒÑÐ»ÑƒÐ³Ð¸**\n\n"
            f"ÐšÐ»ÑŽÑ‡: `{service_key}`\n\n"
            f"Ð¨Ð°Ð³ 2 Ð¸Ð· 4: Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð¸\n"
            f"(Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€: ðŸ’… ÐÐ¾Ð³Ñ‚ÐµÐ²Ð¾Ð¹ ÑÐµÑ€Ð²Ð¸Ñ)"
        )
        
        await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        # ÐŸÐµÑ€ÐµÑ…Ð¾Ð´Ð¸Ð¼ Ðº ÑÐ»ÐµÐ´ÑƒÑŽÑ‰ÐµÐ¼Ñƒ ÑˆÐ°Ð³Ñƒ (Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ)
        user_data[user_id]['adding_service_step'] = 'name'
    
    async def process_add_service_items(self, update, text):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸ - ÑˆÐ°Ð³ 2 (Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ)"""
        user_id = update.effective_user.id
        
        if 'adding_service_step' in user_data[user_id] and user_data[user_id]['adding_service_step'] == 'name':
            service_name = text.strip()
            user_data[user_id]['adding_service']['name'] = service_name
            user_data[user_id]['adding_service_step'] = 'items'
            user_states[user_id] = UserState.ADDING_SERVICE_ITEMS
            
            reply_text = (
                f"ðŸ’… **Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð½Ð¾Ð²Ð¾Ð¹ ÑƒÑÐ»ÑƒÐ³Ð¸**\n\n"
                f"ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ: {service_name}\n\n"
                f"Ð¨Ð°Ð³ 3 Ð¸Ð· 4: Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÑÐ¿Ð¸ÑÐ¾Ðº ÑƒÑÐ»ÑƒÐ³ Ð¸ Ñ†ÐµÐ½Ñ‹\n"
                f"(ÐºÐ°Ð¶Ð´Ð°Ñ ÑƒÑÐ»ÑƒÐ³Ð° Ñ Ð½Ð¾Ð²Ð¾Ð¹ ÑÑ‚Ñ€Ð¾ÐºÐ¸, Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€:\n"
                f"ÐœÐ°Ð½Ð¸ÐºÑŽÑ€ - 1500â‚½\n"
                f"ÐŸÐµÐ´Ð¸ÐºÑŽÑ€ - 2000â‚½)"
            )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        elif user_states[user_id] == UserState.ADDING_SERVICE_ITEMS:
            service_items = text.strip()
            user_data[user_id]['adding_service']['items'] = service_items
            user_states[user_id] = UserState.ADDING_SERVICE_DURATION
            
            reply_text = (
                f"ðŸ’… **Ð”Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð½Ð¾Ð²Ð¾Ð¹ ÑƒÑÐ»ÑƒÐ³Ð¸**\n\n"
                f"Ð£ÑÐ»ÑƒÐ³Ð¸ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ñ‹\n\n"
                f"Ð¨Ð°Ð³ 4 Ð¸Ð· 4: Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ Ð´Ð»Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚ÑŒ Ð¿Ñ€Ð¾Ñ†ÐµÐ´ÑƒÑ€Ñ‹ (Ð² Ð¼Ð¸Ð½ÑƒÑ‚Ð°Ñ…)\n"
                f"(Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€: 90)"
            )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
    
    async def process_add_service_duration(self, update, text):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸ - ÑˆÐ°Ð³ 3 (Ð´Ð»Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚ÑŒ)"""
        user_id = update.effective_user.id
        
        try:
            duration = int(text.strip())
            
            service_data = user_data[user_id]['adding_service']
            success = db.add_service(
                service_data['key'],
                service_data['name'],
                service_data['items'],
                duration
            )
            
            if success:
                reply_text = (
                    f"âœ… **Ð£ÑÐ»ÑƒÐ³Ð° ÑƒÑÐ¿ÐµÑˆÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð°!**\n\n"
                    f"**{service_data['name']}**\n"
                    f"ÐšÐ»ÑŽÑ‡: `{service_data['key']}`\n"
                    f"Ð”Ð»Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚ÑŒ: {duration} Ð¼Ð¸Ð½\n\n"
                    f"Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start Ð´Ð»Ñ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‚Ð° Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ"
                )
            else:
                reply_text = (
                    f"âŒ **ÐžÑˆÐ¸Ð±ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ ÑƒÑÐ»ÑƒÐ³Ð¸**\n\n"
                    f"Ð’Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, ÑƒÑÐ»ÑƒÐ³Ð° Ñ Ñ‚Ð°ÐºÐ¸Ð¼ ÐºÐ»ÑŽÑ‡Ð¾Ð¼ ÑƒÐ¶Ðµ ÑÑƒÑ‰ÐµÑÑ‚Ð²ÑƒÐµÑ‚.\n"
                    f"Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start Ð´Ð»Ñ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‚Ð°"
                )
            
            await update.message.reply_text(reply_text, parse_mode='Markdown')
            
            # ÐžÑ‡Ð¸ÑÑ‚ÐºÐ° ÑÐ¾ÑÑ‚Ð¾ÑÐ½Ð¸Ñ
            user_states[user_id] = UserState.MAIN_MENU
            if 'adding_service' in user_data[user_id]:
                del user_data[user_id]['adding_service']
            if 'adding_service_step' in user_data[user_id]:
                del user_data[user_id]['adding_service_step']
                
        except ValueError:
            await update.message.reply_text(
                "âŒ Ð’Ð²ÐµÐ´Ð¸Ñ‚Ðµ ÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾Ðµ Ñ‡Ð¸ÑÐ»Ð¾ (ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð¼Ð¸Ð½ÑƒÑ‚)"
            )
    
    async def process_add_master(self, update, text):
        """ÐžÐ±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°"""
        user_id = update.effective_user.id
        master_name = text.strip()
        service_key = user_data[user_id].get('new_master_service')
        
        if not service_key:
            await update.message.reply_text(
                "âŒ ÐžÑˆÐ¸Ð±ÐºÐ°: Ð½Ðµ Ð²Ñ‹Ð±Ñ€Ð°Ð½Ð° ÑƒÑÐ»ÑƒÐ³Ð°. Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start"
            )
            return
        
        success = db.add_master(master_name, service_key)
        
        if success:
            reply_text = (
                f"âœ… **ÐœÐ°ÑÑ‚ÐµÑ€ ÑƒÑÐ¿ÐµÑˆÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½!**\n\n"
                f"ðŸ‘¤ {master_name}\n"
                f"Ð£ÑÐ»ÑƒÐ³Ð°: {service_key}\n\n"
                f"Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start Ð´Ð»Ñ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‚Ð° Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ"
            )
        else:
            reply_text = (
                f"âŒ **ÐžÑˆÐ¸Ð±ÐºÐ° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°**\n\n"
                f"Ð’Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ñ‚Ð°ÐºÐ¾Ð¹ Ð¼Ð°ÑÑ‚ÐµÑ€ ÑƒÐ¶Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ð°ÐµÑ‚ Ñ ÑÑ‚Ð¾Ð¹ ÑƒÑÐ»ÑƒÐ³Ð¾Ð¹.\n"
                f"Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ /start Ð´Ð»Ñ Ð²Ð¾Ð·Ð²Ñ€Ð°Ñ‚Ð°"
            )
        
        await update.message.reply_text(reply_text, parse_mode='Markdown')
        
        # ÐžÑ‡Ð¸ÑÑ‚ÐºÐ° ÑÐ¾ÑÑ‚Ð¾ÑÐ½Ð¸Ñ
        user_states[user_id] = UserState.MAIN_MENU
        if 'new_master_service' in user_data[user_id]:
            del user_data[user_id]['new_master_service']
    
    async def confirm_booking(self, query):
        """ÐŸÐ¾Ð´Ñ‚Ð²ÐµÑ€Ð¶Ð´ÐµÐ½Ð¸Ðµ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð´Ð»Ñ Ð·Ð°Ñ€ÐµÐ³Ð¸ÑÑ‚Ñ€Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ"""
        try:
            user_id = query.from_user.id
            await self._finalize_booking(user_id, query)
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² confirm_booking: {e}")
    
    async def complete_booking(self, update):
        """Ð—Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð´Ð»Ñ Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ"""
        try:
            user_id = update.effective_user.id
            await self._finalize_booking(user_id, update)
            user_states[user_id] = UserState.MAIN_MENU
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² complete_booking: {e}")
    
    async def _finalize_booking(self, user_id, update_or_query):
        """Ð¤Ð¸Ð½Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸"""
        try:
            service_type = user_data[user_id]['service_type']
            date = user_data[user_id]['date']
            time = user_data[user_id]['time']
            
            masters = db.get_masters_by_service(service_type)
            available_master = None
            for master in masters:
                if db.is_time_available(master, date, time):
                    available_master = master
                    break
            
            if available_master:
                db.create_appointment(user_id, service_type, available_master, date, time)
                
                date_obj = datetime.strptime(date, "%Y-%m-%d")
                formatted_date = date_obj.strftime("%d.%m.%Y")
                
                # ÐŸÐ¾Ð»ÑƒÑ‡Ð°ÐµÐ¼ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÑƒÑÐ»ÑƒÐ³Ð¸
                services = db.get_all_services()
                service_info = next((s for s in services if s['key'] == service_type), None)
                service_name = service_info['name'] if service_info else service_type
                
                text = (
                    f"ðŸŽ‰ **Ð—ÐÐŸÐ˜Ð¡Ð¬ ÐŸÐžÐ”Ð¢Ð’Ð•Ð Ð–Ð”Ð•ÐÐ!**\n\n"
                    f"ðŸ“… Ð”Ð°Ñ‚Ð°: {formatted_date}\n"
                    f"â° Ð’Ñ€ÐµÐ¼Ñ: {time}\n"
                    f"ðŸ‘©â€ðŸ’» ÐœÐ°ÑÑ‚ÐµÑ€: {available_master}\n"
                    f"ðŸ’… Ð£ÑÐ»ÑƒÐ³Ð°: {service_name}\n\n"
                    f"ðŸ“ {SALON_INFO['address']}\n"
                    f"ðŸ“ž {SALON_INFO['phone']}\n\n"
                    f"âœ¨ Ð–Ð´ÐµÐ¼ Ð²Ð°Ñ!"
                )
            else:
                text = "ðŸ˜” Ð’Ñ€ÐµÐ¼Ñ Ð·Ð°Ð½ÑÑ‚Ð¾. Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð´Ñ€ÑƒÐ³Ð¾Ðµ."
            
            keyboard = [[InlineKeyboardButton("ðŸ  Ð“Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² _finalize_booking: {e}")
    
    async def show_masters(self, query):
        """ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð¸Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸ÑŽ Ð¾ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°Ñ…"""
        try:
            masters = db.get_all_masters()
            text = f"ðŸ‘©â€ðŸ’» **ÐœÐ°ÑÑ‚ÐµÑ€Ð° {SALON_INFO['name']}:**\n\n"
            
            if masters:
                current_service = None
                for master in masters:
                    if current_service != master['service_name']:
                        current_service = master['service_name']
                        text += f"\n**{current_service}:**\n"
                    text += f"â€¢ {master['name']}\n"
            else:
                text += "âŒ ÐœÐ°ÑÑ‚ÐµÑ€Ð¾Ð² Ð¿Ð¾ÐºÐ° Ð½ÐµÑ‚"
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_masters: {e}")
    
    async def show_promotions(self, query):
        """ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð°ÐºÑ†Ð¸Ð¸"""
        try:
            text = (
                f"ðŸŽ¯ **ÐÐºÑ†Ð¸Ð¸ {SALON_INFO['name']}:**\n\n"
                f"ðŸŒŸ Ð¡ÐºÐ¸Ð´ÐºÐ° 20% Ð½Ð° Ð¿ÐµÑ€Ð²Ð¾Ðµ Ð¿Ð¾ÑÐµÑ‰ÐµÐ½Ð¸Ðµ\n"
                f"ðŸ’… ÐœÐ°Ð½Ð¸ÐºÑŽÑ€ + Ð¿ÐµÐ´Ð¸ÐºÑŽÑ€ = ÑÐºÐ¸Ð´ÐºÐ° 15%\n"
                f"ðŸ‘¯â€â™€ï¸ ÐŸÑ€Ð¸Ð²ÐµÐ´Ð¸ Ð¿Ð¾Ð´Ñ€ÑƒÐ³Ñƒ - ÑÐºÐ¸Ð´ÐºÐ° 10%\n"
                f"ðŸŽ‚ Ð’ Ð´ÐµÐ½ÑŒ Ñ€Ð¾Ð¶Ð´ÐµÐ½Ð¸Ñ - ÑÐºÐ¸Ð´ÐºÐ° 25%\n\n"
                f"ðŸ“ž ÐŸÐ¾Ð´Ñ€Ð¾Ð±Ð½Ð¾ÑÑ‚Ð¸: {SALON_INFO['phone']}"
            )
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_promotions: {e}")
    
    async def show_user_bookings(self, query):
        """ÐŸÐ¾ÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð·Ð°Ð¿Ð¸ÑÐ¸ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ñ"""
        try:
            user_id = query.from_user.id
            appointments = db.get_user_appointments(user_id)
            
            if appointments:
                text = "ðŸ“± **Ð’Ð°ÑˆÐ¸ Ð·Ð°Ð¿Ð¸ÑÐ¸:**\n\n"
                
                # ÐŸÐ¾Ð»ÑƒÑ‡Ð°ÐµÐ¼ Ð²ÑÐµ ÑƒÑÐ»ÑƒÐ³Ð¸ Ð´Ð»Ñ ÑÐ¾Ð¿Ð¾ÑÑ‚Ð°Ð²Ð»ÐµÐ½Ð¸Ñ
                services = db.get_all_services()
                services_dict = {s['key']: s['name'] for s in services}
                
                for apt in appointments:
                    service_name = services_dict.get(apt['service_type'], apt['service_type'])
                    date_obj = datetime.strptime(apt['date'], "%Y-%m-%d")
                    formatted_date = date_obj.strftime("%d.%m.%Y")
                    
                    text += f"â€¢ {service_name}\n"
                    text += f"ðŸ“… {formatted_date} Ð² {apt['time']}\n"
                    text += f"ðŸ‘©â€ðŸ’» {apt['master']}\n\n"
                
                text += f"ðŸ“ž Ð”Ð»Ñ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ: {SALON_INFO['phone']}"
            else:
                text = "ðŸ“± Ð£ Ð²Ð°Ñ Ð½ÐµÑ‚ Ð·Ð°Ð¿Ð¸ÑÐµÐ¹\n\nðŸ“… Ð¥Ð¾Ñ‚Ð¸Ñ‚Ðµ Ð·Ð°Ð¿Ð¸ÑÐ°Ñ‚ÑŒÑÑ?"
            
            keyboard = [[InlineKeyboardButton("ðŸ”™ ÐÐ°Ð·Ð°Ð´", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² show_user_bookings: {e}")
    
    async def back_to_main_menu(self, query):
        """Ð’Ð¾Ð·Ð²Ñ€Ð°Ñ‚ Ð² Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ"""
        try:
            user_id = query.from_user.id
            user_states[user_id] = UserState.MAIN_MENU
            
            admin_badge = " ðŸ‘‘" if is_admin(user_id) else ""
            
            text = f"ðŸ  **Ð“Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ {SALON_INFO['name']}**{admin_badge}\n\nÐ’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð´ÐµÐ¹ÑÑ‚Ð²Ð¸Ðµ:"
            
            keyboard = [
                [InlineKeyboardButton("ðŸ“… Ð—Ð°Ð¿Ð¸ÑÐ°Ñ‚ÑŒÑÑ", callback_data="book")],
                [InlineKeyboardButton("ðŸ“‹ Ð£ÑÐ»ÑƒÐ³Ð¸ Ð¸ Ñ†ÐµÐ½Ñ‹", callback_data="services")],
                [InlineKeyboardButton("ðŸ‘©â€ðŸ’» ÐÐ°ÑˆÐ¸ Ð¼Ð°ÑÑ‚ÐµÑ€Ð°", callback_data="masters")],
                [InlineKeyboardButton("ðŸŽ¯ ÐÐºÑ†Ð¸Ð¸", callback_data="promotions")],
                [InlineKeyboardButton("ðŸ“± ÐœÐ¾Ð¸ Ð·Ð°Ð¿Ð¸ÑÐ¸", callback_data="my_bookings")]
            ]
            
            if is_admin(user_id):
                keyboard.append([InlineKeyboardButton("ðŸ‘‘ ÐÐ´Ð¼Ð¸Ð½-Ð¿Ð°Ð½ÐµÐ»ÑŒ", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð² back_to_main_menu: {e}")
    
    async def shutdown(self):
        """ÐšÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾Ðµ Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹ Ð±Ð¾Ñ‚Ð°"""
        logger.info("â„¹ï¸ ÐÐ°Ñ‡Ð°Ð»Ð¾ ÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾Ð³Ð¾ Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ñ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹...")
        self.running = False
        
        try:
            await self.application.stop()
            await self.application.shutdown()
            logger.info("âœ… Ð‘Ð¾Ñ‚ ÐºÐ¾Ñ€Ñ€ÐµÐºÑ‚Ð½Ð¾ Ð¾ÑÑ‚Ð°Ð½Ð¾Ð²Ð»ÐµÐ½")
        except Exception as e:
            logger.error(f"âŒ ÐžÑˆÐ¸Ð±ÐºÐ° Ð¿Ñ€Ð¸ Ð¾ÑÑ‚Ð°Ð½Ð¾Ð²ÐºÐµ Ð±Ð¾Ñ‚Ð°: {e}")
    
    def run(self):
        """Ð—Ð°Ð¿ÑƒÑÐº Ð±Ð¾Ñ‚Ð° Ñ Ð¾Ð±Ñ€Ð°Ð±Ð¾Ñ‚ÐºÐ¾Ð¹ Ð¾ÑˆÐ¸Ð±Ð¾Ðº"""
        self.running = True
        
        def signal_handler(signum, frame):
            logger.info(f"ðŸ›‘ ÐŸÐ¾Ð»ÑƒÑ‡ÐµÐ½ ÑÐ¸Ð³Ð½Ð°Ð» {signum}, Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹...")
            self.running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("ðŸ¤– Ð‘ÐžÐ¢ Ð—ÐÐŸÐ£Ð©Ð•Ð Ð¡ ÐÐ”ÐœÐ˜Ð-Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð•Ðœ!")
        logger.info("ðŸ“± ÐŸÑ€Ð¾Ð²ÐµÑ€ÑŒÑ‚Ðµ Ð±Ð¾Ñ‚Ð° Ð² Telegram")
        logger.info("ðŸ“Š Ð›Ð¾Ð³Ð¸ ÑÐ¾Ñ…Ñ€Ð°Ð½ÑÑŽÑ‚ÑÑ Ð² salon_bot.log")
        logger.info("ðŸ‘‘ ÐÐ´Ð¼Ð¸Ð½Ð¸ÑÑ‚Ñ€Ð°Ñ‚Ð¾Ñ€Ð¾Ð²: " + str(len(ADMIN_IDS)))
        logger.info("ðŸ”„ Ð”Ð»Ñ Ð¾ÑÑ‚Ð°Ð½Ð¾Ð²ÐºÐ¸: Ctrl+C")
        
        retry_count = 0
        max_retries = 5
        
        while self.running and retry_count < max_retries:
            try:
                self.application.run_polling(
                    allowed_updates=Update.ALL_TYPES,
                    drop_pending_updates=True,
                    stop_signals=None
                )
                break
                
            except (NetworkError, TimedOut) as e:
                retry_count += 1
                logger.warning(f"ðŸ”„ Ð¡ÐµÑ‚ÐµÐ²Ð°Ñ Ð¾ÑˆÐ¸Ð±ÐºÐ° (Ð¿Ð¾Ð¿Ñ‹Ñ‚ÐºÐ° {retry_count}/{max_retries}): {e}")
                
                if retry_count < max_retries:
                    wait_time = min(30 * retry_count, 300)
                    logger.info(f"â³ ÐŸÐµÑ€ÐµÐ¿Ð¾Ð´ÐºÐ»ÑŽÑ‡ÐµÐ½Ð¸Ðµ Ñ‡ÐµÑ€ÐµÐ· {wait_time} ÑÐµÐºÑƒÐ½Ð´...")
                    asyncio.run(asyncio.sleep(wait_time))
                else:
                    logger.error("âŒ ÐŸÑ€ÐµÐ²Ñ‹ÑˆÐµÐ½Ð¾ Ð¼Ð°ÐºÑÐ¸Ð¼Ð°Ð»ÑŒÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð¿Ð¾Ð¿Ñ‹Ñ‚Ð¾Ðº Ð¿ÐµÑ€ÐµÐ¿Ð¾Ð´ÐºÐ»ÑŽÑ‡ÐµÐ½Ð¸Ñ")
                    break
                    
            except KeyboardInterrupt:
                logger.info("âŒ¨ï¸ ÐŸÐ¾Ð»ÑƒÑ‡ÐµÐ½ Ctrl+C, Ð·Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹...")
                break
                
            except Exception as e:
                logger.error(f"âŒ ÐÐµÐ¾Ð¶Ð¸Ð´Ð°Ð½Ð½Ð°Ñ Ð¾ÑˆÐ¸Ð±ÐºÐ°: {e}")
                retry_count += 1
                
                if retry_count < max_retries:
                    wait_time = 30
                    logger.info(f"â³ ÐŸÐµÑ€ÐµÐ·Ð°Ð¿ÑƒÑÐº Ñ‡ÐµÑ€ÐµÐ· {wait_time} ÑÐµÐºÑƒÐ½Ð´...")
                    asyncio.run(asyncio.sleep(wait_time))
                else:
                    logger.error("âŒ ÐŸÑ€ÐµÐ²Ñ‹ÑˆÐµÐ½Ð¾ Ð¼Ð°ÐºÑÐ¸Ð¼Ð°Ð»ÑŒÐ½Ð¾Ðµ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð¿Ð¾Ð¿Ñ‹Ñ‚Ð¾Ðº Ð¿ÐµÑ€ÐµÐ¿Ð¾Ð´ÐºÐ»ÑŽÑ‡ÐµÐ½Ð¸Ñ")
                    break

def main():
    """Ð“Ð»Ð°Ð²Ð½Ð°Ñ Ñ„ÑƒÐ½ÐºÑ†Ð¸Ñ Ð·Ð°Ð¿ÑƒÑÐºÐ°"""
    try:
        logger.info("ðŸŽ¯ Ð˜Ð½Ð¸Ñ†Ð¸Ð°Ð»Ð¸Ð·Ð°Ñ†Ð¸Ñ Ð±Ð¾Ñ‚Ð° Ñ Ð°Ð´Ð¼Ð¸Ð½-ÑƒÐ¿Ñ€Ð°Ð²Ð»ÐµÐ½Ð¸ÐµÐ¼...")
        bot = SalonBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("\nâ„¹ï¸ Ð‘Ð¾Ñ‚ Ð¾ÑÑ‚Ð°Ð½Ð¾Ð²Ð»ÐµÐ½ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»ÐµÐ¼")
    except Exception as e:
        logger.error(f"âŒ ÐšÑ€Ð¸Ñ‚Ð¸Ñ‡ÐµÑÐºÐ°Ñ Ð¾ÑˆÐ¸Ð±ÐºÐ°: {e}")
    finally:
        logger.info("ðŸ‘‹ Ð—Ð°Ð²ÐµÑ€ÑˆÐµÐ½Ð¸Ðµ Ñ€Ð°Ð±Ð¾Ñ‚Ñ‹ Ð¿Ñ€Ð¾Ð³Ñ€Ð°Ð¼Ð¼Ñ‹")

if __name__ == '__main__':
    print("ðŸš€ Ð—ÐÐŸÐ£Ð¡Ðš Ð‘ÐžÐ¢Ð Ð¡ ÐÐ”ÐœÐ˜Ð-Ð£ÐŸÐ ÐÐ’Ð›Ð•ÐÐ˜Ð•Ðœ...")
    print("=" * 50)
    main()
